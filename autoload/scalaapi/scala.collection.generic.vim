call scalaapi#package('scala.collection.generic', '', '[p]', '', [])
call scalaapi#trait('AtomicIndexFlag', 'scala.collection.generic', '[t]', '', [])
call scalaapi#trait('BitSetFactory', 'scala.collection.generic', '[t]', '[Coll <: BitSet with BitSetLike[Coll]]', [])
call scalaapi#trait('CanBuildFrom', 'scala.collection.generic', '[t]', '[-From, -Elem, +To]', [])
call scalaapi#trait('CanCombineFrom', 'scala.collection.generic', '[t]', '[-From, -Elem, +To]', [])
call scalaapi#class('ClassTagTraversableFactoryGenericCanBuildFrom', 'scala.collection.generic', '[c]', '[A]', [])
call scalaapi#class('ClassTagTraversableFactory', 'scala.collection.generic', '[c]', '[CC[X] <: Traversable[X] with GenericClassTagTraversableTemplate[X, CC]]', [])
call scalaapi#trait('Clearable', 'scala.collection.generic', '[t]', '', [])
call scalaapi#class('DefaultSignalling', 'scala.collection.generic', '[c]', '', [])
call scalaapi#class('DelegatedContext', 'scala.collection.generic', '[c]', '', [])
call scalaapi#trait('DelegatedSignalling', 'scala.collection.generic', '[t]', '', [])
call scalaapi#trait('FilterMonadic', 'scala.collection.generic', '[t]', '[+A, +Repr]', [])
call scalaapi#class('GenericClassTagCompanion', 'scala.collection.generic', '[c]', '[+CC[X] <: Traversable[X]]', [])
call scalaapi#trait('GenericClassTagTraversableTemplate', 'scala.collection.generic', '[t]', '[+A, +CC[X] <: Traversable[X]]', [])
call scalaapi#class('GenericCompanion', 'scala.collection.generic', '[c]', '[+CC[X] <: GenTraversable[X]]', [])
call scalaapi#class('GenericOrderedCompanion', 'scala.collection.generic', '[c]', '[+CC[X] <: Traversable[X]]', [])
call scalaapi#trait('GenericOrderedTraversableTemplate', 'scala.collection.generic', '[t]', '[+A, +CC[X] <: Traversable[X]]', [])
call scalaapi#trait('GenericParCompanion', 'scala.collection.generic', '[t]', '[+CC[X] <: ParIterable[X]]', [])
call scalaapi#trait('GenericParMapCompanion', 'scala.collection.generic', '[t]', '[+CC[P, Q] <: ParMap[P, Q]]', [])
call scalaapi#trait('GenericParMapTemplate', 'scala.collection.generic', '[t]', '[K, +V, +CC[X, Y] <: ParMap[X, Y]]', [])
call scalaapi#trait('GenericParTemplate', 'scala.collection.generic', '[t]', '[+A, +CC[X] <: ParIterable[X]]', [])
call scalaapi#trait('GenericSeqCompanion', 'scala.collection.generic', '[t]', '[CC[X] <: Traversable[X]]', [])
call scalaapi#trait('GenericSetTemplate', 'scala.collection.generic', '[t]', '[A, +CC[X] <: GenSet[X]]', [])
call scalaapi#trait('GenericTraversableTemplate', 'scala.collection.generic', '[t]', '[+A, +CC[X] <: GenTraversable[X]]', [])
call scalaapi#class('GenMapFactoryMapCanBuildFrom', 'scala.collection.generic', '[c]', '[A, B]', [])
call scalaapi#class('GenMapFactory', 'scala.collection.generic', '[c]', '[CC[A, B] <: GenMap[A, B] with GenMapLike[A, B, CC[A, B]]]', [])
call scalaapi#class('GenSeqFactory', 'scala.collection.generic', '[c]', '[CC[X] <: GenSeq[X] with GenericTraversableTemplate[X, CC]]', [])
call scalaapi#class('GenSetFactory', 'scala.collection.generic', '[c]', '[CC[X] <: GenSet[X] with GenSetLike[X, CC[X]]]', [])
call scalaapi#class('GenTraversableFactoryGenericCanBuildFrom', 'scala.collection.generic', '[c]', '[A]', [])
call scalaapi#class('GenTraversableFactory', 'scala.collection.generic', '[c]', '[CC[X] <: GenTraversable[X] with GenericTraversableTemplate[X, CC]]', [])
call scalaapi#trait('Growable', 'scala.collection.generic', '[t]', '[-A]', [])
call scalaapi#trait('HasNewBuilder', 'scala.collection.generic', '[t]', '[+A, +Repr]', [])
call scalaapi#trait('HasNewCombiner', 'scala.collection.generic', '[t]', '[+T, +Repr]', [])
call scalaapi#object('IdleSignalling', 'scala.collection.generic', '[o]', '', [])
call scalaapi#class('ImmutableMapFactory', 'scala.collection.generic', '[c]', '[CC[A, +B] <: immutable.Map[A, B] with immutable.MapLike[A, B, CC[A, B]]]', [])
call scalaapi#class('ImmutableSetFactory', 'scala.collection.generic', '[c]', '[CC[X] <: immutable.Set[X] with SetLike[X, CC[X]]]', [])
call scalaapi#class('ImmutableSortedMapFactory', 'scala.collection.generic', '[c]', '[CC[A, B] <: immutable.SortedMap[A, B] with SortedMapLike[A, B, CC[A, B]]]', [])
call scalaapi#class('ImmutableSortedSetFactory', 'scala.collection.generic', '[c]', '[CC[A] <: immutable.SortedSet[A] with SortedSetLike[A, CC[A]]]', [])
call scalaapi#class('IndexedSeqFactory', 'scala.collection.generic', '[c]', '[CC[X] <: IndexedSeq[X] with GenericTraversableTemplate[X, CC]]', [])
call scalaapi#object('IsSeqLike', 'scala.collection.generic', '[o]', '', [])
call scalaapi#trait('IsSeqLike', 'scala.collection.generic', '[t]', '[Repr]', [])
call scalaapi#object('IsTraversableLike', 'scala.collection.generic', '[o]', '', [])
call scalaapi#trait('IsTraversableLike', 'scala.collection.generic', '[t]', '[Repr]', [])
call scalaapi#object('IsTraversableOnce', 'scala.collection.generic', '[o]', '', [])
call scalaapi#trait('IsTraversableOnce', 'scala.collection.generic', '[t]', '[Repr]', [])
call scalaapi#trait('IterableForwarder', 'scala.collection.generic', '[t]', '[+A]', [])
call scalaapi#class('MapFactory', 'scala.collection.generic', '[c]', '[CC[A, B] <: Map[A, B] with MapLike[A, B, CC[A, B]]]', [])
call scalaapi#class('MutableMapFactory', 'scala.collection.generic', '[c]', '[CC[A, B] <: mutable.Map[A, B] with mutable.MapLike[A, B, CC[A, B]]]', [])
call scalaapi#class('MutableSetFactory', 'scala.collection.generic', '[c]', '[CC[X] <: mutable.Set[X] with mutable.SetLike[X, CC[X]]]', [])
call scalaapi#class('MutableSortedSetFactory', 'scala.collection.generic', '[c]', '[CC[A] <: mutable.SortedSet[A] with SortedSetLike[A, CC[A]] with mutable.Set[A] with mutable.SetLike[A, CC[A]]]', [])
call scalaapi#class('OrderedTraversableFactoryGenericCanBuildFrom', 'scala.collection.generic', '[c]', '[A]', [])
call scalaapi#class('OrderedTraversableFactory', 'scala.collection.generic', '[c]', '[CC[X] <: Traversable[X] with GenericOrderedTraversableTemplate[X, CC]]', [])
call scalaapi#class('ParFactoryGenericCanCombineFrom', 'scala.collection.generic', '[c]', '[A]', [])
call scalaapi#class('ParFactory', 'scala.collection.generic', '[c]', '[CC[X] <: ParIterable[X] with GenericParTemplate[X, CC]]', [])
call scalaapi#class('ParMapFactoryCanCombineFromMap', 'scala.collection.generic', '[c]', '[K, V]', [])
call scalaapi#class('ParMapFactory', 'scala.collection.generic', '[c]', '[CC[X, Y] <: ParMap[X, Y] with ParMapLike[X, Y, CC[X, Y], _]]', [])
call scalaapi#class('ParSetFactoryGenericCanCombineFrom', 'scala.collection.generic', '[c]', '[A]', [])
call scalaapi#class('ParSetFactory', 'scala.collection.generic', '[c]', '[CC[X] <: ParSet[X] with ParSetLike[X, CC[X], _] with GenericParTemplate[X, CC]]', [])
call scalaapi#class('SeqFactory', 'scala.collection.generic', '[c]', '[CC[X] <: Seq[X] with GenericTraversableTemplate[X, CC]]', [])
call scalaapi#trait('SeqForwarder', 'scala.collection.generic', '[t]', '[+A]', [])
call scalaapi#class('SetFactory', 'scala.collection.generic', '[c]', '[CC[X] <: Set[X] with SetLike[X, CC[X]]]', [])
call scalaapi#trait('Shrinkable', 'scala.collection.generic', '[t]', '[-A]', [])
call scalaapi#trait('Signalling', 'scala.collection.generic', '[t]', '', [])
call scalaapi#trait('Sizing', 'scala.collection.generic', '[t]', '', [])
call scalaapi#object('SliceInterval', 'scala.collection.generic', '[o]', '', [])
call scalaapi#trait('Sorted', 'scala.collection.generic', '[t]', '[K, +This <: Sorted[K, This]]', [])
call scalaapi#class('SortedMapFactorySortedMapCanBuildFrom', 'scala.collection.generic', '[c]', '[A, B]', [])
call scalaapi#class('SortedMapFactory', 'scala.collection.generic', '[c]', '[CC[A, B] <: SortedMap[A, B] with SortedMapLike[A, B, CC[A, B]]]', [])
call scalaapi#class('SortedSetFactorySortedSetCanBuildFrom', 'scala.collection.generic', '[c]', '[A]', [])
call scalaapi#class('SortedSetFactory', 'scala.collection.generic', '[c]', '[CC[A] <: SortedSet[A] with SortedSetLike[A, CC[A]]]', [])
call scalaapi#trait('Subtractable', 'scala.collection.generic', '[t]', '[A, +Repr <: Subtractable[A, Repr]]', [])
call scalaapi#class('TaggedDelegatedContext', 'scala.collection.generic', '[c]', '', [])
call scalaapi#trait('TraversableFactory', 'scala.collection.generic', '[t]', '[CC[X] <: Traversable[X] with GenericTraversableTemplate[X, CC]]', [])
call scalaapi#trait('TraversableForwarder', 'scala.collection.generic', '[t]', '[+A]', [])
call scalaapi#trait('VolatileAbort', 'scala.collection.generic', '[t]', '', [])
