call scalaapi#package('scala.collection.parallel', '', '[p]', '', [])
call scalaapi#class('AdaptiveWorkStealingForkJoinTasksWrappedTask', 'scala.collection.parallel', '[c]', '[R, Tp]', [])
call scalaapi#trait('AdaptiveWorkStealingForkJoinTasks', 'scala.collection.parallel', '[t]', '', [])
call scalaapi#trait('AdaptiveWorkStealingTasksWrappedTask', 'scala.collection.parallel', '[t]', '[R, Tp]', [])
call scalaapi#trait('AdaptiveWorkStealingTasks', 'scala.collection.parallel', '[t]', '', [])
call scalaapi#class('AdaptiveWorkStealingThreadPoolTasksWrappedTask', 'scala.collection.parallel', '[c]', '[R, Tp]', [])
call scalaapi#trait('AdaptiveWorkStealingThreadPoolTasks', 'scala.collection.parallel', '[t]', '', [])
call scalaapi#trait('Combiner', 'scala.collection.parallel', '[t]', '[-Elem, +To]', [])
call scalaapi#trait('CombinerFactory', 'scala.collection.parallel', '[t]', '[U, Repr]', [])
call scalaapi#trait('ExecutionContextTasks', 'scala.collection.parallel', '[t]', '', [])
call scalaapi#class('ExecutionContextTaskSupport', 'scala.collection.parallel', '[c]', '', [])
call scalaapi#trait('FactoryOpsOtherwise', 'scala.collection.parallel', '[t]', '[R]', [])
call scalaapi#trait('FactoryOps', 'scala.collection.parallel', '[t]', '[From, Elem, To]', [])
call scalaapi#object('ForkJoinTasks', 'scala.collection.parallel', '[o]', '', [])
call scalaapi#trait('ForkJoinTasksWrappedTask', 'scala.collection.parallel', '[t]', '[R, +Tp]', [])
call scalaapi#trait('ForkJoinTasks', 'scala.collection.parallel', '[t]', '', [])
call scalaapi#class('ForkJoinTaskSupport', 'scala.collection.parallel', '[c]', '', [])
call scalaapi#object('FutureThreadPoolTasks', 'scala.collection.parallel', '[o]', '', [])
call scalaapi#trait('HavingForkJoinPool', 'scala.collection.parallel', '[t]', '', [])
call scalaapi#class('IterableSplitterAppended', 'scala.collection.parallel', '[c]', '[U >: T, PI <: IterableSplitter[U]]', [])
call scalaapi#class('IterableSplitterMapped', 'scala.collection.parallel', '[c]', '[S]', [])
call scalaapi#class('IterableSplitterTaken', 'scala.collection.parallel', '[c]', '', [])
call scalaapi#class('IterableSplitterZipped', 'scala.collection.parallel', '[c]', '[S]', [])
call scalaapi#class('IterableSplitterZippedAll', 'scala.collection.parallel', '[c]', '[U >: T, S]', [])
call scalaapi#trait('IterableSplitter', 'scala.collection.parallel', '[t]', '[+T]', [])
call scalaapi#class('package.CollectionsHaveToParArray', 'scala.collection.parallel', '[c]', '[C, T]', [])
call scalaapi#object('ParIterable', 'scala.collection.parallel', '[o]', '', [])
call scalaapi#trait('ParIterable', 'scala.collection.parallel', '[t]', '[+T]', [])
call scalaapi#trait('ParIterableLikeAccessor', 'scala.collection.parallel', '[t]', '[R, Tp]', [])
call scalaapi#class('ParIterableLikeAggregate', 'scala.collection.parallel', '[c]', '[S]', [])
call scalaapi#trait('ParIterableLikeBuilderOpsOtherwise', 'scala.collection.parallel', '[t]', '[Cmb]', [])
call scalaapi#trait('ParIterableLikeBuilderOps', 'scala.collection.parallel', '[t]', '[Elem, To]', [])
call scalaapi#class('ParIterableLikeCollect', 'scala.collection.parallel', '[c]', '[S, That]', [])
call scalaapi#class('ParIterableLikeComposite', 'scala.collection.parallel', '[c]', '[FR, SR, R, First <: StrictSplitterCheckTask[FR, _], Second <: StrictSplitterCheckTask[SR, _]]', [])
call scalaapi#class('ParIterableLikeCopy', 'scala.collection.parallel', '[c]', '[U >: T, That]', [])
call scalaapi#class('ParIterableLikeCopyToArray', 'scala.collection.parallel', '[c]', '[U >: T, This >: Repr]', [])
call scalaapi#class('ParIterableLikeCount', 'scala.collection.parallel', '[c]', '', [])
call scalaapi#class('ParIterableLikeCreateScanTree', 'scala.collection.parallel', '[c]', '[U >: T]', [])
call scalaapi#class('ParIterableLikeDrop', 'scala.collection.parallel', '[c]', '[U >: T, This >: Repr]', [])
call scalaapi#class('ParIterableLikeExists', 'scala.collection.parallel', '[c]', '', [])
call scalaapi#class('ParIterableLikeFilter', 'scala.collection.parallel', '[c]', '[U >: T, This >: Repr]', [])
call scalaapi#class('ParIterableLikeFilterNot', 'scala.collection.parallel', '[c]', '[U >: T, This >: Repr]', [])
call scalaapi#class('ParIterableLikeFind', 'scala.collection.parallel', '[c]', '[U >: T]', [])
call scalaapi#class('ParIterableLikeFlatMap', 'scala.collection.parallel', '[c]', '[S, That]', [])
call scalaapi#class('ParIterableLikeFold', 'scala.collection.parallel', '[c]', '[U >: T]', [])
call scalaapi#class('ParIterableLikeForall', 'scala.collection.parallel', '[c]', '', [])
call scalaapi#class('ParIterableLikeForeach', 'scala.collection.parallel', '[c]', '[S]', [])
call scalaapi#class('ParIterableLikeFromScanTree', 'scala.collection.parallel', '[c]', '[U >: T, That]', [])
call scalaapi#class('ParIterableLikeGroupBy', 'scala.collection.parallel', '[c]', '[K, U >: T]', [])
call scalaapi#class('ParIterableLikeMap', 'scala.collection.parallel', '[c]', '[S, That]', [])
call scalaapi#class('ParIterableLikeMax', 'scala.collection.parallel', '[c]', '[U >: T]', [])
call scalaapi#class('ParIterableLikeMin', 'scala.collection.parallel', '[c]', '[U >: T]', [])
call scalaapi#trait('ParIterableLikeNonDivisible', 'scala.collection.parallel', '[t]', '[R]', [])
call scalaapi#trait('ParIterableLikeNonDivisibleTask', 'scala.collection.parallel', '[t]', '[R, Tp]', [])
call scalaapi#class('ParIterableLikeParComposite', 'scala.collection.parallel', '[c]', '[FR, SR, R, First <: StrictSplitterCheckTask[FR, _], Second <: StrictSplitterCheckTask[SR, _]]', [])
call scalaapi#class('ParIterableLikePartition', 'scala.collection.parallel', '[c]', '[U >: T, This >: Repr]', [])
call scalaapi#class('ParIterableLikeProduct', 'scala.collection.parallel', '[c]', '[U >: T]', [])
call scalaapi#class('ParIterableLikeReduce', 'scala.collection.parallel', '[c]', '[U >: T]', [])
call scalaapi#class('ParIterableLikeResultMapping', 'scala.collection.parallel', '[c]', '[R, Tp, R1]', [])
call scalaapi#trait('ParIterableLikeScanTree', 'scala.collection.parallel', '[t]', '[U >: T]', [])
call scalaapi#class('ParIterableLikeSeqComposite', 'scala.collection.parallel', '[c]', '[FR, SR, R, First <: StrictSplitterCheckTask[FR, _], Second <: StrictSplitterCheckTask[SR, _]]', [])
call scalaapi#trait('ParIterableLikeSignallingOps', 'scala.collection.parallel', '[t]', '[PI <: DelegatedSignalling]', [])
call scalaapi#class('ParIterableLikeSlice', 'scala.collection.parallel', '[c]', '[U >: T, This >: Repr]', [])
call scalaapi#class('ParIterableLikeSpan', 'scala.collection.parallel', '[c]', '[U >: T, This >: Repr]', [])
call scalaapi#class('ParIterableLikeSplitAt', 'scala.collection.parallel', '[c]', '[U >: T, This >: Repr]', [])
call scalaapi#trait('ParIterableLikeStrictSplitterCheckTask', 'scala.collection.parallel', '[t]', '[R, Tp]', [])
call scalaapi#class('ParIterableLikeSum', 'scala.collection.parallel', '[c]', '[U >: T]', [])
call scalaapi#class('ParIterableLikeTake', 'scala.collection.parallel', '[c]', '[U >: T, This >: Repr]', [])
call scalaapi#class('ParIterableLikeTakeWhile', 'scala.collection.parallel', '[c]', '[U >: T, This >: Repr]', [])
call scalaapi#trait('ParIterableLikeTaskOps', 'scala.collection.parallel', '[t]', '[R, Tp]', [])
call scalaapi#class('ParIterableLikeToParCollection', 'scala.collection.parallel', '[c]', '[U >: T, That]', [])
call scalaapi#class('ParIterableLikeToParMap', 'scala.collection.parallel', '[c]', '[K, V, That]', [])
call scalaapi#trait('ParIterableLikeTransformer', 'scala.collection.parallel', '[t]', '[R, Tp]', [])
call scalaapi#class('ParIterableLikeZip', 'scala.collection.parallel', '[c]', '[U >: T, S, That]', [])
call scalaapi#class('ParIterableLikeZipAll', 'scala.collection.parallel', '[c]', '[U >: T, S, That]', [])
call scalaapi#trait('ParIterableLike', 'scala.collection.parallel', '[t]', '[+T, +Repr <: ParIterable[T], +Sequential <: scala.Iterable[T] with IterableLike[T, Sequential]]', [])
call scalaapi#class('ParMap.WithDefault', 'scala.collection.parallel', '[c]', '[A, +B]', [])
call scalaapi#object('ParMap', 'scala.collection.parallel', '[o]', '', [])
call scalaapi#trait('ParMap', 'scala.collection.parallel', '[t]', '[K, +V]', [])
call scalaapi#class('ParMapLikeDefaultKeySet', 'scala.collection.parallel', '[c]', '', [])
call scalaapi#class('ParMapLikeDefaultValuesIterable', 'scala.collection.parallel', '[c]', '', [])
call scalaapi#trait('ParMapLike', 'scala.collection.parallel', '[t]', '[K, +V, +Repr <: ParMapLike[K, V, Repr, Sequential] with ParMap[K, V], +Sequential <: Map[K, V] with MapLike[K, V, Sequential]]', [])
call scalaapi#object('ParSeq', 'scala.collection.parallel', '[o]', '', [])
call scalaapi#trait('ParSeq', 'scala.collection.parallel', '[t]', '[+T]', [])
call scalaapi#trait('ParSeqLikeAccessor', 'scala.collection.parallel', '[t]', '[R, Tp]', [])
call scalaapi#class('ParSeqLikeCorresponds', 'scala.collection.parallel', '[c]', '[S]', [])
call scalaapi#class('ParSeqLikeElements', 'scala.collection.parallel', '[c]', '', [])
call scalaapi#class('ParSeqLikeIndexWhere', 'scala.collection.parallel', '[c]', '', [])
call scalaapi#class('ParSeqLikeLastIndexWhere', 'scala.collection.parallel', '[c]', '', [])
call scalaapi#class('ParSeqLikeReverse', 'scala.collection.parallel', '[c]', '[U >: T, This >: Repr]', [])
call scalaapi#class('ParSeqLikeReverseMap', 'scala.collection.parallel', '[c]', '[S, That]', [])
call scalaapi#class('ParSeqLikeSameElements', 'scala.collection.parallel', '[c]', '[U >: T]', [])
call scalaapi#class('ParSeqLikeSegmentLength', 'scala.collection.parallel', '[c]', '', [])
call scalaapi#trait('ParSeqLikeTransformer', 'scala.collection.parallel', '[t]', '[R, Tp]', [])
call scalaapi#class('ParSeqLikeUpdated', 'scala.collection.parallel', '[c]', '[U >: T, That]', [])
call scalaapi#class('ParSeqLikeZip', 'scala.collection.parallel', '[c]', '[U >: T, S, That]', [])
call scalaapi#trait('ParSeqLike', 'scala.collection.parallel', '[t]', '[+T, +Repr <: ParSeq[T], +Sequential <: scala.Seq[T] with SeqLike[T, Sequential]]', [])
call scalaapi#object('ParSet', 'scala.collection.parallel', '[o]', '', [])
call scalaapi#trait('ParSet', 'scala.collection.parallel', '[t]', '[T]', [])
call scalaapi#trait('ParSetLike', 'scala.collection.parallel', '[t]', '[T, +Repr <: ParSetLike[T, Repr, Sequential] with ParSet[T], +Sequential <: Set[T] with SetLike[T, Sequential]]', [])
call scalaapi#trait('PreciseSplitter', 'scala.collection.parallel', '[t]', '[+T]', [])
call scalaapi#class('SeqSplitterAppended', 'scala.collection.parallel', '[c]', '[U >: T, PI <: SeqSplitter[U]]', [])
call scalaapi#class('SeqSplitterMapped', 'scala.collection.parallel', '[c]', '[S]', [])
call scalaapi#class('SeqSplitterPatched', 'scala.collection.parallel', '[c]', '[U >: T]', [])
call scalaapi#class('SeqSplitterTaken', 'scala.collection.parallel', '[c]', '', [])
call scalaapi#class('SeqSplitterZipped', 'scala.collection.parallel', '[c]', '[S]', [])
call scalaapi#class('SeqSplitterZippedAll', 'scala.collection.parallel', '[c]', '[U >: T, S]', [])
call scalaapi#trait('SeqSplitter', 'scala.collection.parallel', '[t]', '[+T]', [])
call scalaapi#object('Splitter', 'scala.collection.parallel', '[o]', '', [])
call scalaapi#trait('Splitter', 'scala.collection.parallel', '[t]', '[+T]', [])
call scalaapi#trait('Task', 'scala.collection.parallel', '[t]', '[R, +Tp]', [])
call scalaapi#trait('TasksWrappedTask', 'scala.collection.parallel', '[t]', '[R, +Tp]', [])
call scalaapi#trait('Tasks', 'scala.collection.parallel', '[t]', '', [])
call scalaapi#trait('TaskSupport', 'scala.collection.parallel', '[t]', '', [])
call scalaapi#object('ThreadPoolTasks', 'scala.collection.parallel', '[o]', '', [])
call scalaapi#trait('ThreadPoolTasksWrappedTask', 'scala.collection.parallel', '[t]', '[R, +Tp]', [])
call scalaapi#trait('ThreadPoolTasks', 'scala.collection.parallel', '[t]', '', [])
call scalaapi#class('ThreadPoolTaskSupport', 'scala.collection.parallel', '[c]', '', [])
call scalaapi#trait('ThrowableOps', 'scala.collection.parallel', '[t]', '', [])
call scalaapi#trait('TraversableOpsOtherwise', 'scala.collection.parallel', '[t]', '[R]', [])
call scalaapi#trait('TraversableOps', 'scala.collection.parallel', '[t]', '[T]', [])
