call scalaapi#package('scala.collection', '', '[p]', '', [])
call scalaapi#object('colonplus', 'scala.collection', '[o]', '', [])
call scalaapi#object('pluscolon', 'scala.collection', '[o]', '', [])
call scalaapi#class('AbstractIterable', 'scala.collection', '[c]', '[+A]', [])
call scalaapi#class('AbstractIterator', 'scala.collection', '[c]', '[+A]', [])
call scalaapi#class('AbstractMap', 'scala.collection', '[c]', '[A, +B]', [])
call scalaapi#class('AbstractSeq', 'scala.collection', '[c]', '[+A]', [])
call scalaapi#class('AbstractSet', 'scala.collection', '[c]', '[A]', [])
call scalaapi#class('AbstractTraversable', 'scala.collection', '[c]', '[+A]', [])
call scalaapi#object('BitSet', 'scala.collection', '[o]', '', [])
call scalaapi#trait('BitSet', 'scala.collection', '[t]', '', [])
call scalaapi#object('BitSetLike', 'scala.collection', '[o]', '', [])
call scalaapi#trait('BitSetLike', 'scala.collection', '[t]', '[+This <: BitSetLike[This] with SortedSet[Int]]', [])
call scalaapi#trait('BufferedIterator', 'scala.collection', '[t]', '[+A]', [])
call scalaapi#trait('CustomParallelizable', 'scala.collection', '[t]', '[+A, +ParRepr <: Parallel]', [])
call scalaapi#trait('DefaultMap', 'scala.collection', '[t]', '[A, +B]', [])
call scalaapi#object('GenIterable', 'scala.collection', '[o]', '', [])
call scalaapi#trait('GenIterable', 'scala.collection', '[t]', '[+A]', [])
call scalaapi#trait('GenIterableLike', 'scala.collection', '[t]', '[+A, +Repr]', [])
call scalaapi#object('GenMap', 'scala.collection', '[o]', '', [])
call scalaapi#trait('GenMap', 'scala.collection', '[t]', '[A, +B]', [])
call scalaapi#trait('GenMapLike', 'scala.collection', '[t]', '[A, +B, +Repr]', [])
call scalaapi#object('GenSeq', 'scala.collection', '[o]', '', [])
call scalaapi#trait('GenSeq', 'scala.collection', '[t]', '[+A]', [])
call scalaapi#trait('GenSeqLike', 'scala.collection', '[t]', '[+A, +Repr]', [])
call scalaapi#object('GenSet', 'scala.collection', '[o]', '', [])
call scalaapi#trait('GenSet', 'scala.collection', '[t]', '[A]', [])
call scalaapi#trait('GenSetLike', 'scala.collection', '[t]', '[A, +Repr]', [])
call scalaapi#object('GenTraversable', 'scala.collection', '[o]', '', [])
call scalaapi#trait('GenTraversable', 'scala.collection', '[t]', '[+A]', [])
call scalaapi#trait('GenTraversableLike', 'scala.collection', '[t]', '[+A, +Repr]', [])
call scalaapi#trait('GenTraversableOnce', 'scala.collection', '[t]', '[+A]', [])
call scalaapi#object('IndexedSeq', 'scala.collection', '[o]', '', [])
call scalaapi#trait('IndexedSeq', 'scala.collection', '[t]', '[+A]', [])
call scalaapi#class('IndexedSeqLikeElements', 'scala.collection', '[c]', '', [])
call scalaapi#trait('IndexedSeqLike', 'scala.collection', '[t]', '[+A, +Repr]', [])
call scalaapi#trait('IndexedSeqOptimized', 'scala.collection', '[t]', '[+A, +Repr]', [])
call scalaapi#object('Iterable', 'scala.collection', '[o]', '', [])
call scalaapi#trait('Iterable', 'scala.collection', '[t]', '[+A]', [])
call scalaapi#trait('IterableLike', 'scala.collection', '[t]', '[+A, +Repr]', [])
call scalaapi#trait('IterableProxy', 'scala.collection', '[t]', '[+A]', [])
call scalaapi#trait('IterableProxyLike', 'scala.collection', '[t]', '[+A, +Repr <: IterableLike[A, Repr] with Iterable[A]]', [])
call scalaapi#object('IterableView', 'scala.collection', '[o]', '', [])
call scalaapi#trait('IterableView', 'scala.collection', '[t]', '[+A, +Coll]', [])
call scalaapi#trait('IterableViewLikeAppended', 'scala.collection', '[t]', '[B >: A]', [])
call scalaapi#trait('IterableViewLikeDroppedWhile', 'scala.collection', '[t]', '', [])
call scalaapi#trait('IterableViewLikeEmptyView', 'scala.collection', '[t]', '', [])
call scalaapi#trait('IterableViewLikeFiltered', 'scala.collection', '[t]', '', [])
call scalaapi#trait('IterableViewLikeFlatMapped', 'scala.collection', '[t]', '[B]', [])
call scalaapi#trait('IterableViewLikeForced', 'scala.collection', '[t]', '[B]', [])
call scalaapi#trait('IterableViewLikeMapped', 'scala.collection', '[t]', '[B]', [])
call scalaapi#trait('IterableViewLikeSliced', 'scala.collection', '[t]', '', [])
call scalaapi#trait('IterableViewLikeTakenWhile', 'scala.collection', '[t]', '', [])
call scalaapi#trait('IterableViewLikeTransformed', 'scala.collection', '[t]', '[+B]', [])
call scalaapi#trait('IterableViewLikeZipped', 'scala.collection', '[t]', '[B]', [])
call scalaapi#trait('IterableViewLikeZippedAll', 'scala.collection', '[t]', '[A1 >: A, B]', [])
call scalaapi#trait('IterableViewLike', 'scala.collection', '[t]', '[+A, +Coll, +This <: IterableView[A, Coll] with IterableViewLike[A, Coll, This]]', [])
call scalaapi#object('Iterator', 'scala.collection', '[o]', '', [])
call scalaapi#class('IteratorGroupedIterator', 'scala.collection', '[c]', '[B >: A]', [])
call scalaapi#trait('Iterator', 'scala.collection', '[t]', '[+A]', [])
call scalaapi#object('JavaConversions', 'scala.collection', '[o]', '', [])
call scalaapi#object('JavaConverters', 'scala.collection', '[o]', '', [])
call scalaapi#object('LinearSeq', 'scala.collection', '[o]', '', [])
call scalaapi#trait('LinearSeq', 'scala.collection', '[t]', '[+A]', [])
call scalaapi#trait('LinearSeqLike', 'scala.collection', '[t]', '[+A, +Repr <: LinearSeqLike[A, Repr]]', [])
call scalaapi#trait('LinearSeqOptimized', 'scala.collection', '[t]', '[+A, +Repr <: LinearSeqOptimized[A, Repr]]', [])
call scalaapi#class('Map.WithDefault', 'scala.collection', '[c]', '[A, +B]', [])
call scalaapi#object('Map', 'scala.collection', '[o]', '', [])
call scalaapi#trait('Map', 'scala.collection', '[t]', '[A, +B]', [])
call scalaapi#class('MapLikeDefaultKeySet', 'scala.collection', '[c]', '', [])
call scalaapi#class('MapLikeDefaultValuesIterable', 'scala.collection', '[c]', '', [])
call scalaapi#class('MapLikeFilteredKeys', 'scala.collection', '[c]', '', [])
call scalaapi#class('MapLikeMappedValues', 'scala.collection', '[c]', '[C]', [])
call scalaapi#trait('MapLike', 'scala.collection', '[t]', '[A, +B, +This <: MapLike[A, B, This] with Map[A, B]]', [])
call scalaapi#trait('MapProxy', 'scala.collection', '[t]', '[A, +B]', [])
call scalaapi#trait('MapProxyLike', 'scala.collection', '[t]', '[A, +B, +This <: MapLike[A, B, This] with Map[A, B]]', [])
call scalaapi#trait('Parallel', 'scala.collection', '[t]', '', [])
call scalaapi#trait('Parallelizable', 'scala.collection', '[t]', '[+A, +ParRepr <: Parallel]', [])
call scalaapi#class('Searching.SearchImpl', 'scala.collection', '[c]', '[A, Repr]', [])
call scalaapi#class('Searching.SearchResult', 'scala.collection', '[c]', '', [])
call scalaapi#object('Searching', 'scala.collection', '[o]', '', [])
call scalaapi#object('Seq', 'scala.collection', '[o]', '', [])
call scalaapi#trait('Seq', 'scala.collection', '[t]', '[+A]', [])
call scalaapi#object('SeqLike', 'scala.collection', '[o]', '', [])
call scalaapi#trait('SeqLike', 'scala.collection', '[t]', '[+A, +Repr]', [])
call scalaapi#trait('SeqProxy', 'scala.collection', '[t]', '[+A]', [])
call scalaapi#trait('SeqProxyLike', 'scala.collection', '[t]', '[+A, +Repr <: SeqLike[A, Repr] with Seq[A]]', [])
call scalaapi#object('SeqView', 'scala.collection', '[o]', '', [])
call scalaapi#trait('SeqView', 'scala.collection', '[t]', '[+A, +Coll]', [])
call scalaapi#trait('SeqViewLikeAppended', 'scala.collection', '[t]', '[B >: A]', [])
call scalaapi#trait('SeqViewLikeDroppedWhile', 'scala.collection', '[t]', '', [])
call scalaapi#trait('SeqViewLikeEmptyView', 'scala.collection', '[t]', '', [])
call scalaapi#trait('SeqViewLikeFiltered', 'scala.collection', '[t]', '', [])
call scalaapi#trait('SeqViewLikeFlatMapped', 'scala.collection', '[t]', '[B]', [])
call scalaapi#trait('SeqViewLikeForced', 'scala.collection', '[t]', '[B]', [])
call scalaapi#trait('SeqViewLikeMapped', 'scala.collection', '[t]', '[B]', [])
call scalaapi#trait('SeqViewLikePatched', 'scala.collection', '[t]', '[B >: A]', [])
call scalaapi#trait('SeqViewLikePrepended', 'scala.collection', '[t]', '[B >: A]', [])
call scalaapi#trait('SeqViewLikeReversed', 'scala.collection', '[t]', '', [])
call scalaapi#trait('SeqViewLikeSliced', 'scala.collection', '[t]', '', [])
call scalaapi#trait('SeqViewLikeTakenWhile', 'scala.collection', '[t]', '', [])
call scalaapi#trait('SeqViewLikeTransformed', 'scala.collection', '[t]', '[+B]', [])
call scalaapi#trait('SeqViewLikeZipped', 'scala.collection', '[t]', '[B]', [])
call scalaapi#trait('SeqViewLikeZippedAll', 'scala.collection', '[t]', '[A1 >: A, B]', [])
call scalaapi#trait('SeqViewLike', 'scala.collection', '[t]', '[+A, +Coll, +This <: SeqView[A, Coll] with SeqViewLike[A, Coll, This]]', [])
call scalaapi#object('Set', 'scala.collection', '[o]', '', [])
call scalaapi#trait('Set', 'scala.collection', '[t]', '[A]', [])
call scalaapi#trait('SetLike', 'scala.collection', '[t]', '[A, +This <: SetLike[A, This] with Set[A]]', [])
call scalaapi#trait('SetProxy', 'scala.collection', '[t]', '[A]', [])
call scalaapi#trait('SetProxyLike', 'scala.collection', '[t]', '[A, +This <: SetLike[A, This] with Set[A]]', [])
call scalaapi#object('SortedMap', 'scala.collection', '[o]', '', [])
call scalaapi#trait('SortedMap', 'scala.collection', '[t]', '[A, +B]', [])
call scalaapi#class('SortedMapLikeDefaultKeySortedSet', 'scala.collection', '[c]', '', [])
call scalaapi#trait('SortedMapLike', 'scala.collection', '[t]', '[A, +B, +This <: SortedMapLike[A, B, This] with SortedMap[A, B]]', [])
call scalaapi#object('SortedSet', 'scala.collection', '[o]', '', [])
call scalaapi#trait('SortedSet', 'scala.collection', '[t]', '[A]', [])
call scalaapi#trait('SortedSetLike', 'scala.collection', '[t]', '[A, +This <: SortedSet[A] with SortedSetLike[A, This]]', [])
call scalaapi#object('Traversable', 'scala.collection', '[o]', '', [])
call scalaapi#trait('Traversable', 'scala.collection', '[t]', '[+A]', [])
call scalaapi#class('TraversableLikeWithFilter', 'scala.collection', '[c]', '', [])
call scalaapi#trait('TraversableLike', 'scala.collection', '[t]', '[+A, +Repr]', [])
call scalaapi#class('TraversableOnce.FlattenOps', 'scala.collection', '[c]', '[A]', [])
call scalaapi#class('TraversableOnce.ForceImplicitAmbiguity', 'scala.collection', '[c]', '', [])
call scalaapi#class('TraversableOnce.MonadOps', 'scala.collection', '[c]', '[+A]', [])
call scalaapi#class('TraversableOnce.OnceCanBuildFrom', 'scala.collection', '[c]', '[A]', [])
call scalaapi#object('TraversableOnce', 'scala.collection', '[o]', '', [])
call scalaapi#trait('TraversableOnce', 'scala.collection', '[t]', '[+A]', [])
call scalaapi#trait('TraversableProxy', 'scala.collection', '[t]', '[+A]', [])
call scalaapi#trait('TraversableProxyLike', 'scala.collection', '[t]', '[+A, +Repr <: TraversableLike[A, Repr] with Traversable[A]]', [])
call scalaapi#class('TraversableView.NoBuilder', 'scala.collection', '[c]', '[A]', [])
call scalaapi#object('TraversableView', 'scala.collection', '[o]', '', [])
call scalaapi#trait('TraversableView', 'scala.collection', '[t]', '[+A, +Coll]', [])
call scalaapi#trait('TraversableViewLikeAppended', 'scala.collection', '[t]', '[B >: A]', [])
call scalaapi#trait('TraversableViewLikeDroppedWhile', 'scala.collection', '[t]', '', [])
call scalaapi#trait('TraversableViewLikeEmptyView', 'scala.collection', '[t]', '', [])
call scalaapi#trait('TraversableViewLikeFiltered', 'scala.collection', '[t]', '', [])
call scalaapi#trait('TraversableViewLikeFlatMapped', 'scala.collection', '[t]', '[B]', [])
call scalaapi#trait('TraversableViewLikeForced', 'scala.collection', '[t]', '[B]', [])
call scalaapi#trait('TraversableViewLikeMapped', 'scala.collection', '[t]', '[B]', [])
call scalaapi#trait('TraversableViewLikeSliced', 'scala.collection', '[t]', '', [])
call scalaapi#trait('TraversableViewLikeTakenWhile', 'scala.collection', '[t]', '', [])
call scalaapi#trait('TraversableViewLikeTransformed', 'scala.collection', '[t]', '[+B]', [])
call scalaapi#trait('TraversableViewLike', 'scala.collection', '[t]', '[+A, +Coll, +This <: TraversableView[A, Coll] with TraversableViewLike[A, Coll, This]]', [])
call scalaapi#trait('ViewMkString', 'scala.collection', '[t]', '[+A]', [])
